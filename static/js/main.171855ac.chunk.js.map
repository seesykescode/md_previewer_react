{"version":3,"sources":["components/Preview.js","App.js","serviceWorker.js","index.js"],"names":["myMarked","require","setOptions","renderer","Renderer","gfm","breaks","tables","sanitize","highlight","code","highlightAuto","value","Preview","__html","this","props","data","react_default","a","createElement","className","id","dangerouslySetInnerHTML","getText","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","input","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","preventDefault","name","onChange","cols","rows","components_Preview","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQACIA,SAAWC,EAAQ,KAEvBD,EAASE,WAAW,CAChBC,SAAU,IAAIH,EAASI,SACvBC,KAAK,EACLC,QAAQ,EACRC,QAAQ,EACRC,UAAU,EACVC,UAAW,SAASC,GAChB,OAAOT,EAAQ,IAAgBU,cAAcD,GAAME,aAqB5CC,oLAbX,MAAO,CAACC,OADQd,EAASe,KAAKC,MAAMC,wCAMhC,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUC,wBAAyBR,KAAKS,oBAXtCC,aC4EPC,cArFb,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,KAAMC,KACDiB,MAAQ,CACXC,MAAK,k6CA2DPP,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IACpBA,EAAKW,aAAeX,EAAKW,aAAaF,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IA/DHA,4EAkENY,GACXxB,KAAKyB,SAAS,CAACN,MAAOK,EAAEE,OAAO7B,6CAGpB2B,GACXA,EAAEG,kDAKF,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,YAAUuB,KAAK,GAAI/B,MAAOG,KAAKkB,MAAMC,MAAOU,SAAU7B,KAAKoB,aAAcb,GAAG,SAASuB,KAAK,KAAKC,KAAK,OAClG5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAS9B,KAAMF,KAAKkB,MAAMC,gBAhFhBT,aCQEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.171855ac.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nlet myMarked = require('marked')\r\n\r\nmyMarked.setOptions({\r\n    renderer: new myMarked.Renderer(),\r\n    gfm: true,\r\n    breaks: true,\r\n    tables: true,\r\n    sanitize: true,\r\n    highlight: function(code) {\r\n        return require('highlight.js').highlightAuto(code).value\r\n    }\r\n})\r\n\r\nclass Preview extends Component {\r\n\r\ngetText() {\r\n    let rawMarkup = myMarked(this.props.data)\r\n    return {__html: rawMarkup}\r\n}\r\n\r\n    \r\n    render() {\r\n        return (\r\n          <div className=\"Preview\">\r\n            <div\r\n              id=\"preview\"\r\n              dangerouslySetInnerHTML={this.getText()}\r\n            />\r\n          </div>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default Preview","import React, {Component} from 'react';\nimport './App.css';\nimport Preview from './components/Preview'\n\nclass App extends Component  {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: `\n      \n# Markdown Previewer\n## Created by Johnathon Sykes\n____\n### Emphasis and Italics\nYou want to make a bold statement? Use double asterisks surrounding your text.\n**Like this** \n\nNeed to italicize your text? Just use single astericks surrounding your text.\n*Like this*\n____\n### Code in Markdown\nStandalone elements can be typed with a a pair of backticks (\\`\\`) surrounding your code\n\\`<h2> isn't rendering and that's good<h2>\\`\n\nHere's a code block, I'm working on getting syntax highlighting working.\n\\`\\`\\`\\ javascript\nfunction fancyAlert(arg) {\n  if(arg) {\n    $.facebox({div:'#foo'})\n  }\n}\n\\`\\`\\`\n____\n### Lists\nHere's how you create a list in markdown\n#### Ordered\n1. Thing\n2. Thing 2\n3. Thing 3.\n\n#### Unordered list\n* Thing\n* Another Thing\n* 3rd Thing's a charm\nJust like that. Cool, right\n____\n### Blockquotes\nUse a \\`>\\` in front of your text in order to create a block text\n> Because **WE** are your friends\n> **YOU'LL** never be alone again\n> Well come on!\n> Well come on!\n> Well come on!\n____\n### Links\nLinks can be created by using the following syntax\n\\`[<link text>](<URL>)\\`\nCheck this link out!\n[My favorite soccer team](http://www.lagalaxy.com)\n____\n### Images\nImage syntax is pretty similar to links but with one big difference...well character\n\\`![<alt text of image>](<image URL>)\\`\n![You win...Markdown!](https://media.giphy.com/media/3oEduGdxEVeRU3fijC/giphy.gif)\n      `\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange(e){\n    this.setState({input: e.target.value})\n  }\n\n  handleSubmit(e){\n    e.preventDefault()\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n      <textarea name=\"\"  value={this.state.input} onChange={this.handleChange} id=\"editor\" cols=\"30\" rows=\"10\"></textarea>\n        <Preview data={this.state.input}></Preview>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}